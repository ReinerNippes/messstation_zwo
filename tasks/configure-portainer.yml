---
- name: Get Auth token
  uri:
    url: "https://localhost:9443/api/auth"
    method: POST
    body_format: json
    validate_certs: no
    headers:
      Content-Type: "application/json"
    body: '{"Username": "{{ ansible_env.USER }}", "Password": "{{ ansible_env.USER }}{{ ansible_env.USER }}{{ ansible_env.USER }}"}'
    status_code: 200
  register: portainer_auth
  
- name: Get list of endpoints
  uri:
    url: "https://localhost:9443/api/endpoints?name=local&excludeSnapshots=true"
    method: GET
    validate_certs: no
    headers:
      Authorization: "Bearer {{ portainer_auth.json.jwt }}" 
    status_code:
      - 200
      - 204
  register: portainer_endpoints

- name: Set portainer endpoint data
  set_fact:
    portainer_endpoint_data: "{{ portainer_endpoints.json[0] }}"
  when: portainer_endpoints.json|length>0

- name: Create local endpoint, if not exists
  uri:
    url: "https://localhost:9443/api/endpoints"
    method: POST
    body_format: form-multipart
    validate_certs: no
    headers:
      Authorization: "Bearer {{ portainer_auth.json.jwt }}" 
    body:
      Name: "local"
      EndpointCreationType: "1"
      URL: "unix:///var/run/docker.sock"
    status_code: 200
  register: this
  when: portainer_endpoints.json|length==0

- name: Set portainer endpoint data from newly created endpoint
  set_fact:
    portainer_endpoint_data: "{{ this.json }}"
  when: portainer_endpoints.json|length==0

- name: Get list of stacks
  uri:
    url: "https://localhost:9443/api/stacks"
    method: GET
    validate_certs: no
    headers:
      Authorization: "Bearer {{ portainer_auth.json.jwt }}" 
    status_code:
      - 200
      - 204
  register: portainer_stacks

- name: Create a directory for portainer and all DFLD data
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
    mode: 0777
  loop:
    - /dfld
    - /dfld/postgres/data
    - /dfld/influxdb/data
    - /dfld/influxdb/config
    - /dfld/grafana/data
    - /dfld/grafana/provisioning
    - /dfld/ultrafeeder/globe_history
    - /dfld/ultrafeeder/graphs1090
    - /dfld/telegraf

- name: Copy telegraf config
  copy:
    src: "files/telegraf.conf"
    dest: "/dfld/telegraf"
    mode: '0644'

#
# create stacks
#

- name: Read infrastructure env file
  set_fact:
    compose_env: "{{ dict(lookup('file', 'files/compose.env').split() | map('split', '=')) }}"

#
# create infrastructure stack
#

- name: Read infrastructure yml compose file
  set_fact:
    compose_yaml: "{{ lookup('file', 'files/infrastructure-compose.yml')|from_yaml }}"

- name: Remove dump1090, if no hardware found
  ansible.builtin.set_fact:
    compose_yaml: "{{ compose_yaml|ansible.utils.remove_keys(target=['dump1090']) }}"
  when: hw_conf["ADSB_AVAILABLE"]==0

- name: Deploy stack infrastructure, if not exists
  uri:
    url: "https://localhost:9443/api/stacks/create/standalone/string?endpointId={{ portainer_endpoint_data.Id }}"
    method: POST
    body_format: json
    validate_certs: no
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ portainer_auth.json.jwt }}" 
    body: '{ "name": "infrastructure",
             "env": {{ compose_env | dict2items(key_name="name", value_name="value") | to_json }},
	     "stackFileContent": {{ compose_yaml | to_nice_yaml | to_json }} }'
    timeout: 300
    status_code: 200
  when: "'infrastructure' not in portainer_stacks.json|map(attribute='Name')"
  
#
# create ingress stack
#

- name: Read infrastructure yml compose file
  set_fact:
    compose_yaml: "{{ lookup('file', 'files/ingress-compose.yml')|from_yaml }}"

- name: Remove bme280, if no hardware found
  ansible.builtin.set_fact:
    compose_yaml: "{{ compose_yaml|ansible.utils.remove_keys(target=['bme2influx']) }}"
  when: hw_conf["BME280_AVAILABLE"]==0

- name: Remove dfld_dnms, if no hardware found
  ansible.builtin.set_fact:
    compose_yaml: "{{ compose_yaml|ansible.utils.remove_keys(target=['dnms2influx']) }}"
  when: hw_conf["DFLD_DNMS_AVAILABLE"]==0

- name: Remove dfld_legacy, if no hardware found
  ansible.builtin.set_fact:
    compose_yaml: "{{ compose_yaml|ansible.utils.remove_keys(target=['dfld2influx']) }}"
  when: hw_conf["DFLD_LEGACY_AVAILABLE"]==0

- name: Remove dnms_i2c, if no hardware found
  ansible.builtin.set_fact:
    compose_yaml: "{{ compose_yaml|ansible.utils.remove_keys(target=['dnmsiic2influx']) }}"
  when: hw_conf["DNMS_I2C_AVAILABLE"]==0

- name: Remove detect_flyover, if no hardware found
  ansible.builtin.set_fact:
    compose_yaml: "{{ compose_yaml|ansible.utils.remove_keys(target=['detect_flyover']) }}"
  when: hw_conf["ADSB_AVAILABLE"]==0

- name: Deploy stack ingress, if not exists
  uri:
    url: "https://localhost:9443/api/stacks/create/standalone/string?endpointId={{ portainer_endpoint_data.Id }}"
    method: POST
    body_format: json
    validate_certs: no
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ portainer_auth.json.jwt }}" 
    body: '{ "name": "ingress",
             "env": {{ compose_env | dict2items(key_name="name", value_name="value") | to_json }},
	     "stackFileContent": {{ compose_yaml | to_nice_yaml | to_json }} }'
    timeout: 300
    status_code: 200
  when: "'ingress' not in portainer_stacks.json|map(attribute='Name')"
  
